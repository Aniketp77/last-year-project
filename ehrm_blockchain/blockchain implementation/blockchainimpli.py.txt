


Step 1: Setting Up Flask
First, make sure you have Python installed on your system. Then, install Flask using pip:


pip install Flask




Create a new directory for your project and navigate into it.

Step 2: Implementing Blockchain
Create a file named blockchain.py for implementing the blockchain functionality:

python code



import hashlib
import json
from time import time

class Blockchain:
    def __init__(self):
        self.chain = []
        self.current_transactions = []

        # Create genesis block
        self.new_block(previous_hash='1', proof=100)

    def new_block(self, proof, previous_hash=None):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'transactions': self.current_transactions,
            'proof': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        }

        # Reset the current list of transactions
        self.current_transactions = []

        self.chain.append(block)
        return block

    def new_transaction(self, patient_id, data):
        self.current_transactions.append({
            'patient_id': patient_id,
            'data': data,
        })
        return self.last_block['index'] + 1

    @property
    def last_block(self):
        return self.chain[-1]

    @staticmethod
    def hash(block):
        return hashlib.sha256(json.dumps(block, sort_keys=True).encode()).hexdigest()

    def proof_of_work(self, last_proof):
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1
        return proof

    @staticmethod
    def valid_proof(last_proof, proof):
        guess = f'{last_proof}{proof}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"
		
		
		
		
		
Step 3: Creating Flask Application
Create a file named app.py for the Flask application:

python code


from flask import Flask, jsonify, request
from blockchain import Blockchain

app = Flask(__name__)
blockchain = Blockchain()

@app.route('/mine', methods=['GET'])
def mine():
    last_block = blockchain.last_block
    last_proof = last_block['proof']
    proof = blockchain.proof_of_work(last_proof)

    blockchain.new_transaction(patient_id=0, data={})  # Placeholder transaction for the patient

    previous_hash = blockchain.hash(last_block)
    block = blockchain.new_block(proof, previous_hash)

    response = {
        'message': "New block forged",
        'index': block['index'],
        'transactions': block['transactions'],
        'proof': block['proof'],
        'previous_hash': block['previous_hash'],
    }
    return jsonify(response), 200

@app.route('/transactions/new', methods=['POST'])
def new_transaction():
    values = request.get_json()

    required = ['patient_id', 'data']
    if not all(k in values for k in required):
        return 'Missing values', 400

    index = blockchain.new_transaction(values['patient_id'], values['data'])

    response = {'message': f'Transaction will be added to Block {index}'}
    return jsonify(response), 201

@app.route('/chain', methods=['GET'])
def full_chain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
    }
    return jsonify(response), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
	
	
	
Step 4: Running the Application
Run the Flask application:


Copy code
python app.py


Step 5: Interacting with the Blockchain
You can now interact with the blockchain by making HTTP requests to the defined endpoints (/mine, /transactions/new, /chain).

Here's a basic guide on how to interact with the blockchain:

Mine a New Block:

bash
Copy code
GET /mine
Create a New Transaction:



Copy code
POST /transactions/new
Content-Type: application/json

{
    "patient_id": 1,
    "data": {
        "record_type": "medical",
        "diagnosis": "example diagnosis",
        "treatment": "example treatment"
    }
}
View the Entire Blockchain:


Copy code
GET /chain